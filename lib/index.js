#!/usr/bin/env node
"use strict";const{program}=require("commander"),{version}=require("../package.json"),path=require("path"),fileSystem=require("fs"),chalk=require("chalk"),promisify=require("util").promisify,chmodr=require("chmodr"),ncp=require("ncp").ncp,rimraf=require("rimraf"),prompt=require("inquirer").createPromptModule(),fs={exists:promisify(fileSystem.exists),mkdir:promisify(fileSystem.mkdir),chmodr:promisify(chmodr),ncp:promisify(ncp),rimraf:promisify(rimraf),readFile:promisify(fileSystem.readFile),writeFile:promisify(fileSystem.writeFile)},check=async a=>{const b=path.resolve(a);return!(await fs.exists(b))&&b},create=async a=>{await fs.mkdir(a,{recursive:!0}),await fs.chmodr(a,493)},generate=async(a,b)=>{const c=path.join(__dirname,"..","template"),d=path.resolve(c+"/"+("project"===a?"project":"package"));return await fs.ncp(d,b)},transform=async(a,b)=>{const c=path.join(b,"package.json");let d=await fs.readFile(c);for(let c in a)d=d.toString().replace("{"+c+"}",a[c]);return await fs.writeFile(c,d)},rollback=async a=>{const b=await check(a);b&&fs.rimraf(a)},getDetails=async a=>{return await prompt([{type:"input",name:"name",default:a,message:"Name: "},{type:"input",name:"description",message:"Description : "},{type:"input",name:"author",message:"Author : "},{type:"input",name:"version",message:"Version: ",default:"1.0.0"},{type:"input",name:"license",message:"License: ",default:"MIT"}])},trigger=async(a,b)=>{try{const c=await check(b);c||(console.log(chalk.red(`Project ${b} already exists`)),process.exit(0)),await create(c);const d=await getDetails(b);await generate(a,c),await transform(d,c)}catch(a){console.log(a)}return!0};program.version(version),program.command("generate <type> <name>").description("This command to generate eith project or package").action(trigger),program.parse(process.argv);